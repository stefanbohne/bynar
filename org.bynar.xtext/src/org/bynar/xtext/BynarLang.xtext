grammar org.bynar.xtext.BynarLang with org.bynar.versailles.xtext.VersaillesLang

import "http://www.bynar.org/versailles/xtext/VersaillesLang" as versailles

generate bynarLang "http://www.bynar.org/xtext/BynarLang"

@Override 
CompilationUnit returns versailles::CompilationUnit: super;
@Override
Language returns Language: {BynarLanguage} "bynar" "(" major=NUMBER "," minor=NUMBER ")";

@Override 
SimpleStatement returns versailles::Statement:
	super
|   "component" ({RegisterComponent} bitPosition=IndexExpr | {RecordComponent}) name=Name (title=STRING)? (description=InterpolatedString)? ":" type=TypeExpression
|	{RecordAlign} "align" "at" alignment=Expression unit=BitUnit
|	{RecordOffset} "offset" ("to" | "by") offset=Expression unit=BitUnit
|	{UnionVariant} "alternative" name=Name (title=STRING)? (description=InterpolatedString)? ":" type=TypeExpression
|	{EnumValue} "value" name=Name (title=STRING)? (description=InterpolatedString)? "=" value=Expression	
;

@Override 
ModifiedType returns versailles::TypeExpression:
	CompoundType ( {versailles::KindedType.type=current} "::" kind=CompoundType
	             | {versailles::WhereType.type=current} ("where" | inverted?="unless") where=Expression
	             | {WrittenType.type=current} "written" written=Expression
				 | {ConvertedType.type=current} "converted" conversion=Expression
		         | {InterpretedType.type=current} "is" interpretation=Interpretation )*
;

@Override
CompoundType returns versailles::TypeExpression:
	super
|	{BitFieldType} "bits" bitWidth=Expression
|	{RecordType} "record" statements=BlockStmt
|	{UnionType} "union" statements=BlockStmt
|	{RegisterType} "register" bitWidth=Expression statements=BlockStmt
|	{ArrayType} "array" "of" elementType=TypeExpression ("length" length=Expression | "until" until=Expression)
;

Interpretation:
	{EnumInterpretation} "one" "of" statements=BlockStmt
|	{FixedInterpretation} "fixed" value=Expression
|	{UnitInterpretation} "in" unit=STRING
|	{ContainingInterpretation} "containing" containedType=CompoundType
;
BitUnit:
	{UnitBits} ("bits" | "bit")
|	{UnitBytes} ("bytes" | "byte")
|	{UnitKBytes} ("kB" | "kilobytes" | "kilobyte")
|	{UnitKBytes} ("kiB" | "kibibytes" | "kibibyte")
|	{UnitMBytes} ("MB" | "megabytes" | "megabyte")
|	{UnitMBytes} ("MiB" | "mibibytes" | "mibibyte")
|	{UnitGBytes} ("GB" | "gigabytes" | "gibabyte")
|	{UnitGBytes} ("GiB" | "gibibytes" | "gibibyte")
|	{UnitTBytes} ("TB" | "terabytes" | "terabyte")
|	{UnitTBytes} ("TiB" | "tibibytes" | "tibibyte")
;

@Override 
Name:
	super |
    "align" | "at" | "array" | "bit" |"bits" | "by" | "bynar" | "byte" | "bytes" | 
    "component" | "containing" | "converted" | 
    "fixed" | "kB" | "gigabyte" | "gigabytes" | "gibibyte" | "gibibytes" | 
    "kilobytes" | "kilobyte" | "kibibyte" | "kibibytes" | "is" | "length" | 
    "megabytes" | "megabyte" | "mibibyte" | "mibibytes" | "offset" | "one" | "of" | 
    "record" | "register" |
 	"terabyte" | "terabytes" | "tibibyte" | "tibibytes" | "to" | 
 	"union" | "variant" | "value" | "written"
;
@Override 
TypeName:
	super
| 	"GB" | "GiB" | "MB" | "MiB" | "TB" | "TiB" 
;

