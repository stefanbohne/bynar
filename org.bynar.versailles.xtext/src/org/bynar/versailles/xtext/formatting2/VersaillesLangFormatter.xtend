/*
 * generated by Xtext 2.12.0
 */
package org.bynar.versailles.xtext.formatting2

import com.google.inject.Inject
import org.bynar.versailles.xtext.services.VersaillesLangGrammarAccess
import org.bynar.versailles.xtext.versaillesLang.CompilationUnit
import org.bynar.versailles.xtext.versaillesLang.LetStmt
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.bynar.versailles.xtext.versaillesLang.DefStmt
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.formatting2.internal.AbstractTextReplacer
import org.eclipse.xtext.formatting2.regionaccess.ITextSegment
import org.eclipse.xtext.formatting2.ITextReplacerContext

class SimpleTextReplacer extends AbstractTextReplacer {
	
	String newText;
	
	protected new(IFormattableDocument document, ITextSegment region, String newText) {
		super(document, region)
		this.newText = newText
	}
	
	override createReplacements(ITextReplacerContext context) {
		context.addReplacement(region.replaceWith(newText))
		context
	}
	
}

class VersaillesLangFormatter extends AbstractFormatter2 {
	
	@Inject extension VersaillesLangGrammarAccess

	def dispatch void format(CompilationUnit compilationUnit, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		compilationUnit.allSemanticRegions.forEach[
				if (it.text == "\\langle" || it.text == "<.")
					document.addReplacer(new SimpleTextReplacer(document, it, "〈"))
			    else if (it.text == "\\rangle" || it.text == ".>")
			    	document.addReplacer(new SimpleTextReplacer(document, it, "〉"))
			    else if (it.text == "->" || it.text == "\\leftarrow" || it.text == "\to")
			    	document.addReplacer(new SimpleTextReplacer(document, it, "→"))
			]
	}

}
