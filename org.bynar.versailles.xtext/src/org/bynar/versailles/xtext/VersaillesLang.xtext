grammar org.bynar.versailles.xtext.VersaillesLang

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate versaillesLang "http://www.bynar.org/versailles/xtext/VersaillesLang"


CompilationUnit hidden(WS, ML_COMMENT, SL_COMMENT): 
	{CompilationUnit} statements+=AnnotatedStmt (";"+ statements+=ComplexStatement)* (";"+ "return" expression=Expression)? ";"*
;


Statements: {Statements} "{" statements+=AnnotatedStmt (";"+ statements+=ComplexStatement)* ";"* "}";
ComplexStatement returns Statement:
		AnnotatedStmt
	|	Statements
;
AnnotatedStmt returns Statement:
    "@" {AnnotatedStmt} annotation=Expression statement=SimpleStatement
|   SimpleStatement
;
SimpleStatement returns Statement:
	{PassStmt} "pass"
|	{FailStmt} "fail"
|	{LetStmt} "let" pattern=Expression ("=" value=Expression)?
|	{ForgetStmt} "forget" pattern=Expression "=" value=Expression
|	{RememberStmt} "remember" pattern=Expression "=" value=Expression
|	{ForStmt} "for" pattern=Expression "from" container=Expression 
|	{WhereStmt} ("where" | inverted?="unless") condition=Expression
|	{SwitchStmt} "switch" "{" ("case" cases+=ComplexStatement ";"*)* "}"
|	{IfStmt} "if" condition=Expression 
             ("then" then=ComplexStatement | then=Statements) 
             ("asserting" assertion=Expression)? 
             ("else" else=ComplexStatement)? 
|	{LoopStmt} ("from" assertion=Expression)? ("do" do=ComplexStatement)? ("loop" loop=ComplexStatement)? ("until" | while?="while") condition=Expression
|   {DefStmt} ("def"|let?="letdef") name=Name
					( (title=STRING)? (description=InterpolatedString)? ":" type=TypeExpression ("=" value=Expression)?
					| (arguments+=(TupleExpr|TupleTypeExpr))+ (title=STRING)? (description=InterpolatedString)? (
							":" type=TypeExpression ("=" value=Expression)?
						|   janusClass=JanusClassExpression
							( ":" type=TypeExpression ("=" value=Expression)?
						    | (name2=Name)? results=TupleExpr (title2=STRING)? (description2=InterpolatedString)? statements=ComplexStatement)))
|	{TypeStmt} ("type"|let?="lettype") name=TypeName (arguments+=(TupleExpr|TupleTypeExpr))* (title=STRING)? (description=InterpolatedString)? 
					("::" kind=TypeExpression)? ("=" type=TypeExpression)?
|   {ModuleStmt} "module" path=NamePath (title=STRING)? (description=InterpolatedString)? statements=Statements
|   {VariantStmt} "variant" name=Name
					( (title=STRING)? (description=InterpolatedString)? ":" type=TypeExpression ("=" value=Expression)?
					| argument=(TupleExpr|TupleTypeExpr) (title=STRING)? (description=InterpolatedString)? )
					
;


Expression:
	ExprLambda
;
LambdaExpr:
	pattern=ExprIf ("=>" | janusClass=JanusClassExpression) body=ExprLambda
;
ExprLambda returns Expression:
	ExprIf ({LambdaExpr.pattern=current} ("=>" | janusClass=JanusClassExpression) body=ExprLambda)?
;
ExprIf returns Expression:
    ExprImplies ({IfExpr.then=current} => "if" condition=Expression "else" else=ExprImplies)*
;
ImpliesOp returns Operator: op=("==>" | "implies");
ExprImplies returns Expression:
    ExprIff ( {BinaryExpr.left=current} op=ImpliesOp right=ExprIff )*
;
IffOp returns Operator: op=("<=>" | "iff");
ExprIff returns Expression:
    ExprOr ( {BinaryExpr.left=current} op=IffOp right=ExprAnd )*
;
OrOp returns Operator: op=("||" | "or");
ExprOr returns Expression:
	ExprAnd ( {BinaryExpr.left=current} op=OrOp right=ExprAnd )*
;
AndOp returns Operator: {Operator} op=("&&" | "and");
ExprAnd returns Expression:
	ExprComp ( {BinaryExpr.left=current} op=AndOp right=ExprComp )*
;
ComparisonOp returns Operator: {Operator} op=("==" | "<" | ">" | "<=" | ">=" | "!=" | "in");
ExprComp returns Expression:
	ExprConcat ( {BinaryExpr.left=current} op=ComparisonOp right=ExprConcat)?
;
ConcatOp returns Operator: {Operator} op=("++");
ExprConcat returns Expression:
	ExprAdd ({BinaryExpr.left=current} => op=ConcatOp right=ExprAdd)*
;
AddOp returns Operator: {Operator} op=("+" | "-");
ExprAdd returns Expression:
	ExprMul ( {BinaryExpr.left=current} op=AddOp right=ExprMul)*
;
MulOp returns Operator: {Operator} op=("*" | "/" | "div" | "mod");
ExprMul returns Expression:
	ExprTyped ( {BinaryExpr.left=current} op=MulOp right=ExprTyped)*
;
AssertingOp returns Operator: op="asserting";
ExprTyped returns Expression:
	ExprUnary ({TypedExpr.base=current} ":" type=TypeExpression)? 
	          ({BinaryExpr.then=current} op=AssertingOp condition=ExprImplies)?
;
UnaryOp returns Operator: {Operator} op=("~" | "-" | "!");
ExprUnary returns Expression:
	ExprApp
|	{UnaryExpr} op=UnaryOp operand=ExprUnary 
;
ExprApp returns Expression:
	SimpleExpr ( {ApplicationExpr.function=current} => argument=TupleExpr 
		       | {ApplicationExpr.argument=current} => "." function=CasesExpr
	           | {MemberAccessExpr.base=current} => "." memberName=Name
	           | {TypeApplicationExpr.function=current} => argument=TupleTypeExpr
	           | {IndexApplicationExpr.function=current} => argument=IndexExpr)*
;
SimpleExpr returns Expression:
	{Variable} (linear?="?")? name=Name
|	{SpecialVariable} "_"
|	{NumberLiteral} value=NUMBER
|	{StringLiteral} value=STRING
|	InterpolatedString
|	TupleExpr
|	{ListExpr} index=IndexExpr
|   {BlockExpr} "{" statements+=AnnotatedStmt (";"+ statements+=ComplexStatement)* (";"+ ("return" | yield?="yield") scope=Expression)? ";"* "}"
|	CasesExpr
|	{Type2Expr} type=TupleTypeExpr
;

InterpolatedString:
	strings+=INTERPOL_FULL
|   strings+=INTERPOL_START expressions+=Expression (strings+=INTERPOL_MIDDLE expressions+=Expression)* strings+=INTERPOL_END
;

TupleExpr returns Expression: 
	{TupleExpr} "(" (components+=TupleComponent ("," components+=TupleComponent)*)? (forceTuple?=",")? ")"
;
TupleComponent:
	(name=Name "=")? value=Expression
;

IndexExpr:
	"[" IndexExprSimple ( {ComprehensionExpr.creator=current} (steps+=ComprehensionStep)+
		                | ({SequenceIndexExpr.first=current} "," second=IndexExprSimple)* ","?) "]"
;
IndexExprSimple:
	{SingletonIndexExpr} index=Expression ( {RangeIndexExpr.from=current} ".." to=Expression
										  | {KeyValueExpr.key=current} "=" value=Expression )?
;
ComprehensionStep: "for" pattern=Expression "from" list=Expression (=> ("where" | inverted?="unless") condition=Expression)?;

CasesExpr: "{" {CasesExpr} ("case" cases+=LambdaExpr ";")+ "}";


JanusClass: "->" | "<-" | "<->" | ">->" | "<-<" | ">-<" | "<>->" | "<-<>" | "<>-<>";
JanusClassExpression returns JanusClassExpression:
	{JanusClass} jc=JanusClass
|	">-" JanusClassExpr "->"
|	{RevJanusClass} "<-" jc=JanusClassExpr "-<"
;
JanusClassExpr returns JanusClassExpression:
	MaxJanusClass
;
MaxJanusClass returns JanusClassExpression:
	CompJanusClass ({MaxJanusClass.left=current} "|_|" right=CompJanusClass)*
;
CompJanusClass returns JanusClassExpression:
	SimpleJanusClass ({CompJanusClass.left=current} "." right=SimpleJanusClass)*
;
SimpleJanusClass returns JanusClassExpression:
	{JanusClass} jc=JanusClass
|	{JanusClassVariable} (linear?="?")? name=TypeName
|	">-" JanusClassExpr "->"
|	{RevJanusClass} "<-" jc=JanusClassExpr "-<"
;


TypeExpression returns TypeExpression:
	FunctionType
;
FunctionType returns TypeExpression:
	ModifiedType ( {FunctionType.left=current} janusClass=JanusClassExpression right=FunctionType
		         | {PiType.left=current} "-->" right=FunctionType )?
;
ModifiedType returns TypeExpression:
	CompoundType ( {KindedType.type=current} "::" kind=CompoundType
				 // TODO: where types are bynar only
				 | {WhereType.type=current} ("where" | inverted?="unless") where=Expression )*
;
CompoundType returns TypeExpression:
	ApplicationType
|	{AlgebraicType} "algebraic" statements=Statements
|	{InductiveType} "inductive" statements=Statements
|	{BigTupleType} "tuple" statements=Statements
;
ApplicationType returns TypeExpression:
	SimpleType ( {ValueApplicationType.function=current} => argument=TupleExpr
	           | {ApplicationType.function=current} => argument=TupleTypeExpr
	           | {MemberAccessType.base=current} => "." memberName=Name)* 
;
SimpleType returns TypeExpression:
	{TypeVariable} (linear?="?")? name=TypeName
|   TupleTypeExpr
|	{Expr2Type} value=TupleExpr
;
TupleTypeExpr returns TypeExpression:
	"{" {TupleType} components+=TupleTypeComponent ("," components+=TupleTypeComponent)* (forceTuple?=",")? "}"
;
TupleTypeComponent: (name=Name ":")? type=TypeExpression;


TypeName: ID_UPPER | ID_BACKTICK;
Name: ID_LOWER | TypeName | 
      "algebraic" | "and" | "asserting" | "def" |"do" | "else" | 
      "fail" | "for" | "forget" | "from" | "if" | "in" | "inductive" | 
      "let" | "letdef" | "lettype" | "loop" | "mod" | "module" | "or" | 
      "remember" | "return" | "pass" | "then" | "tuple" | "unless" | "until" | "where"| "yield";
NamePath: steps+=Name ("." steps+=Name)*;

terminal ID_LOWER:
	('a'..'z')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal ID_BACKTICK:
	'`' (!("\n"|'`'))* '`'
;
terminal ID_UPPER:
	('A'..'Z')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal fragment DEC:
	('0'..'9')
;
terminal fragment OCT:
	('0'..'7')
;
terminal fragment HEX:
	('0'..'9' | 'a'..'f' | 'A'..'F')
;
terminal fragment BIN:
	('0'..'1')
;
terminal NUMBER:
	DEC(DEC|'_')* ('.' (DEC|'_')*)? (('e'|'E'|'p'|'P') ('+' | '-')? DEC(DEC|'_')*)?
|	('0d'|'0D') DEC(DEC|'_')* ('.' (DEC|'_')*)? (('p'|'P') ('+' | '-')? DEC(DEC|'_')*)?
|	('0x'|'0X') HEX(HEX|'_')* ('.' (HEX|'_')*)? (('p'|'P') ('+' | '-')? DEC(DEC|'_')*)?
|	('0b'|'0B') BIN(BIN|'_')* ('.' (BIN|'_')*)? (('p'|'P') ('+' | '-')? DEC(DEC|'_')*)?
|	('0o'|'0O') OCT(OCT|'_')* ('.' (OCT|'_')*)? (('p'|'P') ('+' | '-')? DEC(DEC|'_')*)?
;
terminal STRING:
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
terminal INTERPOL_FULL:
	"'" (!("'"|"$")|"''"|"$$")* "'";
terminal INTERPOL_START:
	"'" (!("'"|"$")|"''"|"$$")* "$";
terminal INTERPOL_MIDDLE:
	"$" (!("'"|"$")|"''"|"$$")* "$";
terminal INTERPOL_END:
	"$" (!("'"|"$")|"''"|"$$")* "'";
terminal ML_COMMENT :
	'/*' -> '*/';
terminal SL_COMMENT :
	'//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS :
	(' '|'\t'|'\r'|'\n')+;
